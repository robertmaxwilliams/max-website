;; for intereactive session ONLY, uncomment this stuff:
;;(ql:quickload :max-website)
;;(in-package :max-website)
;;(start-website "/Users/max/Repos/website/")

(in-package :max-website)

(defun start-website (document-root is-testing)
  (setq *show-lisp-errors-p* is-testing)
  (setq *show-lisp-backtraces-p* is-testing)
  (defparameter *testing* is-testing)
  (set-path-globals-from-root (pathname document-root))
  (format t "Document root:~a~%" *document-root*)
  (format t "Is Testing? ~a~%" is-testing)
  (set-dispatch-table)
  (let ((port (if is-testing 8080 5001)))
    (format t "Port: ~a~%" port)
    (hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port port
				      :document-root *document-root*))))

(defun set-dispatch-table ()
  "Sets hunchentoot's dispatch table. Notice prepending *fun-dispatch-table*, it is compile-time
  generated by calls to define-url-fn"
  (if (null *document-root*) (error "document root must be set before dispatch table can be set!"))
  (setq *dispatch-table*
	(append
	 *fun-dispatch-table*
	 (list
	  ;;(create-regex-dispatcher "^/index" 'controller-index)
	  (create-regex-dispatcher "^/blog$" 'controller-blog)
	  (create-regex-dispatcher "^/blog/*" 'controller-blog-listing)

	  (create-prefix-dispatcher "/demos" 'controller-demos)
	  (create-regex-dispatcher "^/demos/*" 'controller-404)

	  (create-prefix-dispatcher "/about" 'controller-about)
	  (create-folder-dispatcher-and-handler "/images/" *images-dir*)
	  (create-folder-dispatcher-and-handler "/files/" *files-dir*)
	  (create-regex-dispatcher "^/principia-discordia/$" 'principia-landing-page)
	  (create-regex-dispatcher "^/principia-discordia$" 'principia-landing-page)
	  (create-folder-dispatcher-and-handler "/principia-discordia/" *principia-dir*)

	  (create-folder-dispatcher-and-handler "/css/" *css-dir*)
	  (create-static-file-dispatcher-and-handler "/favicon.ico" *favicon-file*)
	  (create-regex-dispatcher "^/$" 'controller-index)
	  (create-regex-dispatcher "^/hello" 'controller-hello)
	  (create-regex-dispatcher "^/*" 'controller-404)
	 ))))

(defun principia-landing-page ()
  "rediercting discordia links to page 1 of the book"
  (standard-page (:title "The Principia According to Huneker")
    (:h1 "A NEW TRUTH")
    (:p "The Principia Discordia, rendered in a less sexist format using singular \"they\" where appropriate.")
    (:a :style "font-size: 50px;" :href "/principia-discordia/1.html" "TO THE BOOK, READ IT HERE, READ IT NOW")))

(defmacro define-url-fn ((name &key title is-unlisted) &body body)
  "Call like this: (define-url-fn (foo) \"some docstring\" (string 'bar))
  defines the function, pushes it into *fun-dispatch-table* and *fun-index* then
  recompiles *dispatch-table*."
  (if (null title) (setq title name))
  (let ((url (format nil "/fun/~(~a~)" name)))
    `(progn
       (let ((*my-url ,url)) ;; wrapping in let to make *my-url available
         (declare (ignorable *my-url));;to get rid of warning when not used, which is usualy
         (defun ,name ()
           ,@body))
       (push (create-prefix-dispatcher ,url ',name)
             *fun-dispatch-table*)
       ,(if (not is-unlisted)
          `(push (list (string-downcase (string ',name)) ',title (documentation #',name t))
                 *fun-index*))
       (remove-alist-duplicate-string-keys *fun-index*))))

;; This section defines the controllers.
;; Controllers return an entire html page and are bound to a URL.
(defun controller-index ()
 (standard-page (:title "Max Williams")
   (:h1 "Robert Max Williams")
   (:a
     :href "/files/cv-max-williams.pdf"
     (:img :src "/images/face.jpg"
           :alt "Max Williams, click for resume"
           :class "logo"
           :style "center;"))
   (markdown (truename #p"bio.md") :stream html-stream)))

(defun controller-about ()
 (standard-page (:title "About")
   (:h1 "How did this website?")
   (:img :src "/images/lisplogo_fancy_trans_256.png"
	 :alt "Lisp Alien, credit to Conrad Barski"
	 :style "center; height: 150px")
   (markdown (truename #p"about.md") :stream html-stream)))

(defun controller-hello ()
  "this is left in for nostalgia and sanity's sake"
  "Hello there")

(defun controller-404 ()
  (setf (return-code *reply*) +http-not-found+)
  (standard-page (:title "404 Page not found")
   (:h1 "Sorry about that, page not found.")
   (:p "Use the top navigation or back button to get back to safety.")))

(defun describe-fun-index (s)
  "s is the html stream, puts list of titles and descriptions into s"
  (with-html-output (s nil :indent t)
    (loop for name-docstring in *fun-index*
       do (db (name title docstring) name-docstring
	    (htm (:h3 :class "nobottommargins" (:a :href (format nil "/fun/~A" name) (str title))) (str docstring))))))

(defun controller-demos ()
  (standard-page (:title "Demos")
    (:h2 "Justa few software demos and games")
    (describe-fun-index html-stream)))

;; here is an example of how to implement html objects as functions:
;; (defun checkbox (stream name checked &optional value)
;;     (with-html-output (stream)
;;       (:input :type "checkbox" :name name :checked checked :value value)))

(defun controller-blog ()
  (standard-page (:title "Blog index")
    (:h3 "Blog posts:")
    (loop for pathname-name-title-preview in (blog-files)
       do (db (pathname name title preview) pathname-name-title-preview
	    (unused pathname)
	    (htm (:h3 :class "nobottommargins" (:a :href (str:join "" (list "/blog/" name))
			  (str title)))
		 (str (str:join "-" (mapcar (lambda (n) (format nil "~a" n))
                             (blog-name-date-extractor name))))
		 (:p (str preview)))))))

(defun controller-blog-listing ()
  (db (pathname title) (blog-pathname-title (request-uri*))
    (standard-page (:title (str title))
      (:h1 (str title))
      (str (blog-page pathname)))))
